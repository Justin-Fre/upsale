import time  # to simulate a real time data, time loop
import random
import numpy as np  # np mean, np random
import pandas as pd  # read csv, df manipulation
import plotly.express as px  # interactive charts
import streamlit as st  # üéà data web app development
import pyodbc
from sklearn.preprocessing import LabelEncoder
coder = LabelEncoder()
from xgboost import XGBClassifier
from sklearn.ensemble import RandomForestClassifier, VotingClassifier
import lightgbm as lgb
from lightgbm import LGBMClassifier
from sklearn.metrics import log_loss
from sklearn.model_selection import cross_val_score
lgbmodel = LGBMClassifier(random_state=42, num_class = 3)
import joblib
##from Feature_engineering import *
import base64
import os
import matplotlib.pyplot as plt

st.set_page_config(
    page_title="Model predict  segment  of  customer",
    page_icon="‚úÖ",
    layout="wide",
)

# T·∫£i m√¥ h√¨nh ƒë√£ l∆∞u

def load_model(upsale):
    return joblib.load(upsale)

directory = '/Users/mac/Desktop/Project/upsale'  # Thay th·∫ø b·∫±ng ƒë∆∞·ªùng d·∫´n th·ª±c t·∫ø
model_path = os.path.join(directory, 'upsale.pkl')
loaded_model = load_model(model_path)

# t·∫£i d·ªØ  li·ªáu  ch·ªçnn
path = '/Users/mac/Desktop/Project/upsale/lost_customer.csv'
lost_customer = pd.read_csv(path)

path_1 = '/Users/mac/Desktop/Project/upsale/best_customer.csv'
best_customer = pd.read_csv(path_1)

path_2 = '/Users/mac/Desktop/Project/upsale/at_risk_customers.csv'
at_risk_customer = pd.read_csv(path_2)

path_3 = '/Users/mac/Desktop/Project/upsale/loyal_customers.csv'
loyal_customers = pd.read_csv(path_3)


# T·∫°o giao di·ªán ng∆∞·ªùi d√πng
st.title("üîª D·ª± ƒëo√°n h√†nh vi mua h√†ng c·ªßa kh√°ch h√†ng")
st.markdown('''
    :blue[ S·∫£n ph·∫©m  c·ªßa  luonglv]''')


st.button("üôç‚Äç‚ôÇÔ∏è Nh·∫≠p Th√¥ng Tin Mua H√†ng V√†o ƒê√¢y")
# Nh·∫≠p th√¥ng tin t·ª´ ng∆∞·ªùi d√πng
recency = st.number_input("Recency")
frequency = st.number_input("Frequency")
monetary_value = st.number_input("Monetary Value")

# D·ª± ƒëo√°n khi ng∆∞·ªùi d√πng nh·∫•n n√∫t
if st.button("üéØ D·ª± ƒêo√°n"):
    input_data = pd.DataFrame([[recency, frequency, monetary_value]], columns=['Recency', 'Frequency', 'MonetaryValue'])
    prediction = loaded_model.predict(input_data)
    st.write(f"K·∫øt qu·∫£ D·ª± ƒëo√°n: {prediction[0]}")

 # Th√™m di·ªÖn gi·∫£i cho k·∫øt qu·∫£
    if prediction[0] == "At Risk Customers":
        st.write("Nh√≥m b√°o ƒë·ªông, ng√†y g·∫ßn ƒë√¢y mua l√† kh√° xa, t·∫ßn su·∫•t mua kh√¥ng cao v√† gi√° tr·ªã c≈©ng kh√¥ng cao. N√™n ch√∫ √Ω nh√≥m kh√°ch h√†ng n√†y v√† k√≠ch th√≠ch nh√≥m n√†y b·∫±ng c√°c ch∆∞∆°ng tr√¨nh mua s·∫£n ph·∫©m n√†y t·∫∑ng s·∫£n kh√°c k√®m theo ƒë·ªÉ tƒÉng kh·∫£ nƒÉng ti·∫øp c·∫≠n c√°c s·∫£n ph·∫©m v√†o nh√≥m kh√°ch h√†ng n√†y")
    elif prediction[0] == "Best Customers":
        st.write("Nh√≥m ti·ªÅm  nƒÉng v·ªõi c√¥ng ty v√† th∆∞·ªùng xuy√™n s·ª≠ d·ª•ng s·∫£n ph·∫©m, ng√†y g·∫ßn nh·∫•t ƒëang s·ª≠ d·ª•ng nh√≥m  n√†y l√† t·∫≠p trung ph·ªï bi·∫øn 5,5 ng√†y g·∫ßn  ƒë√¢yy gi√° tr·ªã mang l·∫°i cao. N√™n c√≥ ch∆∞∆°ng tr√¨nh g·ªçi ƒëi·ªán c·∫£m ∆°n kh√°ch h√†ng v√† chi √¢n kh√°ch h√†ng k·ªãp th·ªùi.")
    elif prediction[0] == "Lost Customers":
        st.write("Nh√≥m kh√°ch h√†ng ƒëang r·ªùi b·ªè t·∫ßn su·∫•t mua c·ª±c th·∫•p, ng√†y g·∫ßn ƒë√¢y mua l√† t·∫≠p trung ph·ªï bi·∫øn 17 ng√†y g·∫ßn  ƒë√¢y ch√≠nh v√¨ th·∫ø gi√° tr·ªã ƒëem l·∫°i c≈©ng th·∫•p nh·∫•t. N√™n c√≥ kh·∫£o s√°t xem nguy√™n nh√¢n t·ª´ ƒë√¢u, g·ªçi ƒëi·ªán t∆∞ v·∫•n v√† ƒë∆∞a ra k·ªãch b·∫£n thuy·∫øt ph·ª•c.")
    elif prediction[0] == "Loyal Customers":
        st.write("Nh√≥m kh√°ch h√†ng VIP c·ªßa c√¥ng ty t·∫ßn su·∫•t mua l·ªõn, ng√†y g·∫ßn ƒë√¢y mua t·∫≠p trung nhi·ªÅu 2 ng√†y g√¢n  ƒë√¢y. Gi·ªëng nh∆∞ nh√≥m best customer ƒë√¢y l√† nh√≥m trung th√†nh n√™n c√≥ nh·ªØng ch∆∞∆°ng tr√¨nh ∆∞u ƒë√£i ƒë·∫∑c bi·ªát cho nh√≥m s·∫£n ph·∫©m n√†y ho·∫∑c chi √¢n ng√†y sinh nh·∫≠t ƒë·ªÉ kh√°ch h√†ng c·∫£m th·∫•y ch√¢n tr·ªçng v√† s·ª≠ d·ª•ng nhi·ªÅu h∆°n.")
    
    st.button("üí∞ L·ªãch S·ª≠ Mua H√†ng Tr∆∞·ªõc ƒê√¢y Nh√≥m Kh√°ch H√†ng N√†y")

        #v·∫Ω  bi·ªÉu  ƒë·ªì  l·ªãch  s·ª≠  mua  h√†ng  tr∆∞·ªõc  ƒë√¢y
    if prediction[0] == "At Risk Customers":
        # V·∫Ω bi·ªÉu ƒë·ªì
        plt.figure(figsize=(10, 6))

# V·∫Ω ƒë∆∞·ªùng cho t·ª´ng ph√¢n kh√∫c
        for product in at_risk_customer.index:
            plt.plot(at_risk_customer.columns, at_risk_customer.loc[product], marker='o', label=product)

            plt.title('Gi√° Tr·ªã Mua H√†ng C·ªßa T·∫≠p At Risk Customers Theo Th√°ng Cho C√°c S·∫£n Ph·∫©m')
            plt.xlabel('Th√°ng')
            plt.ylabel('Gi√° Tr·ªã')
            plt.legend(title='S·∫£n ph·∫©m')
            plt.xticks(rotation=45)

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
            st.pyplot(plt)
    if prediction[0] == "Best Customers":
        # V·∫Ω bi·ªÉu ƒë·ªì
        plt.figure(figsize=(10, 4))

# V·∫Ω ƒë∆∞·ªùng cho t·ª´ng ph√¢n kh√∫c
        for product in best_customer.index:
            plt.plot(best_customer.columns, best_customer.loc[product], marker='o', label=product)

            plt.title('Gi√° Tr·ªã Mua H√†ng C·ªßa T·∫≠p Best Customers Theo Th√°ng Cho C√°c S·∫£n Ph·∫©m')
            plt.xlabel('Th√°ng')
            plt.ylabel('Gi√° Tr·ªã')
            plt.legend(title='S·∫£n ph·∫©m')
            plt.xticks(rotation=45)

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
            st.pyplot(plt)
    if prediction[0] == "Lost Customers":
        # V·∫Ω bi·ªÉu ƒë·ªì
        plt.figure(figsize=(10, 4))

# V·∫Ω ƒë∆∞·ªùng cho t·ª´ng s·∫£n ph·∫©m
        for product in lost_customer.index:
            plt.plot(lost_customer.columns, lost_customer.loc[product], marker='o', label=product)

            plt.title('Gi√° Tr·ªã Mua H√†ng C·ªßa T·∫≠p Lost Customers Theo Th√°ng Cho C√°c S·∫£n Ph·∫©m')
            plt.xlabel('Th√°ng')
            plt.ylabel('Gi√° Tr·ªã')
            plt.legend(title='S·∫£n ph·∫©m')
            plt.xticks(rotation=45)

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
            st.pyplot(plt)

    if prediction[0] == "Loyal Customers":
        # V·∫Ω bi·ªÉu ƒë·ªì
        plt.figure(figsize=(10, 4))

# V·∫Ω ƒë∆∞·ªùng cho t·ª´ng ph√¢n kh√∫c
        for product in loyal_customers.index:
            plt.plot(loyal_customers.columns, loyal_customers.loc[product], marker='o', label=product)

            plt.title('Gi√° Tr·ªã Mua H√†ng C·ªßa T·∫≠p Loyal Customers Theo Th√°ng Cho C√°c S·∫£n Ph·∫©m')
            plt.xlabel('Th√°ng')
            plt.ylabel('Gi√° Tr·ªã')
            plt.legend(title='S·∫£n ph·∫©m')
            plt.xticks(rotation=45)

# Hi·ªÉn th·ªã bi·ªÉu ƒë·ªì trong Streamlit
            st.pyplot(plt)

    st.button("üíπ G·ª£i √Ω t∆∞ v·∫•n mua s·∫£n ph·∫©m m·ªõi ho·∫∑c mua th√™m")
    if prediction[0] == "At Risk Customers":
        st.write("T·∫°i th√°ng 09 nh√≥m kh√°ch h√†ng n√†y c√≥  xu  h∆∞·ªõng  d√πng  s·∫£n  ph·∫©m 2 th·∫•p nh∆∞ng  b√π  l·∫°i  s·∫£n  ph·∫©m  1 tƒÉng ƒë·ªôt  bi·∫øn, n√™n  t∆∞  v·∫•n  d√≤ng  s·∫£n  ph·∫©m  2 v√† duy  tr√¨  s·∫£n  ph·∫©m  0.")
    elif prediction[0] == "Best Customers":
        st.write("Nh√≥m kh√°ch  h√†ng  t·∫°i  th√°ng  09 c√≥  xu  h∆∞·ªõng  s·ª≠  d·ª•ng  s·∫£n  ph·∫©m  2 gi·∫£m m·∫°nhh, s·∫£n  ph·∫©m  0 ƒëang ph·ª•c  h·ªìi, s·∫£n ph·∫©m  3 ·ªïn ƒë·ªãnh. N√™n t∆∞ v√¢n  mua  th√™m  s·∫£n  ph·∫©m  0.")
    elif prediction[0] == "Lost Customers":
        st.write("Nh√≥m kh√°ch h√†ng n√†y trong  th√°ng  09 c√≥  xu  h∆∞·ªõng  s·ª≠  d·ª•ng  2 s·∫£n  ph·∫©m 2 v√† 0, n√™n t·∫≠p  trung  t∆∞  v·∫•n  nh√≥m  02 v√¨  th√°ng  10 c√≥  th·ªÉ  gi·∫£m. ")
    elif prediction[0] == "Loyal Customers":
        st.write("Nh√≥m kh√°ch h√†ng n√†y trong  th√°ng  09 c√≥  nh∆∞  c·∫ßu  s·ª≠  d·ª•ng  3 s·∫£n ph·∫©m  nh∆∞ nhau, n√™n  ch√∫  tr·ªçng  c√°ch  th·ª©c  tr·ªçng  s√≥c.")

st.button("üéà G·ª£i √Ω chi  ti·∫øt  s·∫£n  ph·∫©m")
